# 
# how to add packages?
# 
    # you can search for them here: https://search.nixos.org/packages
    #
    # if you find a package like: nixpkg.python38Packages.setuptools
    # then add a section like this:
    #    [[packages]]
    #    load = [ "python38Packages", "setuptools",]
    # 
    # if you need a specific version 
    # search for the package (e.g. "setuptools") on here: https://lazamar.co.uk/nix-versions/
    # each version will have a long hash like "3f50332bc4913a56ad216ca01f5d0bd24277a6b2" 
    # (which is a commit on the nixpkg repo)
    # once you copy the hash, you can add the package below like
    # 
    #    [[packages]]
    #    load = [ "python38Packages", "setuptools",]
    #    from = "3f50332bc4913a56ad216ca01f5d0bd24277a6b2"

# 
# Complex packages
# 
    # things such as platform-specific packages,
    # loading from a git repository,
    # or if you find an online solution that involves native build inputs
    # you can use the following advanced format
    # 
    #    [[packages]]
    #    load = [ "nixGLNvidia",]
    #    onlyIf = [ [ "stdenv", "isLinux",],] # for MacOS use: onlyIf = [ [ "stdenv", "isDarwin",],]
    #    # see https://discourse.nixos.org/t/opencv-with-cuda-in-nix-shell/7358/5
    #    from = { fetchGit = { url = "https://github.com/guibou/nixGL", rev = "7d6bc1b21316bab6cf4a6520c2639a11c25a220e" }, }
    # 
    # in general when looking at online forms, look at the shell.nix file
    # specifically look at the `# create a shell` and `main.packages.mkShell` part
    # and know that seeing `pkgs` online translates to `main.packages` inside the shell.nix file


# [[ you can add tools for your project right here or at the bottom ]]
[[packages]]
load = [ "docker" ]

# 
# ogre
# 
[[packages]]
load = [ "libGLU" ]

[[packages]]
load = [ "libGL" ]

[[packages]]
load = [ "freetype" ]

[[packages]]
load = [ "freeimage" ]

[[packages]]
load = [ "zziplib" ]

[[packages]]
load = [ "xorg", "xorgproto" ]

[[packages]]
load = [ "xorg", "libXrandr" ]

[[packages]]
load = [ "xorg", "libXaw" ]

[[packages]]
load = [ "freeglut" ]

[[packages]]
load = [ "xorg", "libXt" ]

[[packages]]
load = [ "libpng" ]

[[packages]]
load = [ "boost169" ]

[[packages]]
load = [ "ois" ]

[[packages]]
load = [ "xorg", "libX11" ]

[[packages]]
load = [ "xorg", "libXmu" ]

[[packages]]
load = [ "xorg", "libSM" ]

[[packages]]
load = [ "xorg", "libXxf86vm" ]

[[packages]]
load = [ "xorg", "libICE" ]

[[packages]]
load = [ "xorg", "libXrender" ]

# 
# Python
# 
[[packages]]
load = [ "python38",]

[[packages]]
load = [ "python38Packages", "setuptools",]

[[packages]]
load = [ "python38Packages", "pip",]

[[packages]]
load = [ "python38Packages", "virtualenv",]

[[packages]]
load = [ "python38Packages", "wheel",]

[[packages]]
load = [ "cmake",]

[[packages]]
load = [ "pkg-config",]

[[packages]]
load = [ "libffi",]


# 
# for .so errors on linux with opencv+ffmpeg
# 

[[packages]]
onlyIf = [ [ "stdenv", "isLinux",],]
load = [ "glib",]
asNativeBuildInput = true
from = "528d35bec0cb976a06cc0e8487c6e5136400b16b"

[[packages]]
onlyIf = [ [ "stdenv", "isLinux",],]
load = [ "libglvnd",]
asNativeBuildInput = true
from = "559cf76fa3642106d9f23c9e845baf4d354be682"

# 
# 
# 
# Need-to-build-from-source tools
#
# 
# 
# Note: most projects need these, 
# and if you need them for one project nix has a shared-memory across projects
# comment these out in a situation such as deploying a project to a minimal server

# 
# Linux
# 
[[packages]]
load = [ "pkgconfig",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isLinux",],]

[[packages]]
load = [ "libconfig",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isLinux",],]

[[packages]]
load = [ "cmake",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isLinux",],]

[[packages]]
load = [ "stdenv", "cc",]
onlyIf = [ [ "stdenv", "isLinux",],]

# 
# Mac
# 
[[packages]]
load = [ "darwin", "xcode", ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "xcbuild",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "xcodebuild",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "libobjc", ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "CoreServices" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "CoreFoundation" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "Foundation" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "AVKit" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "AVFoundation" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "AppKit" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "WebKit" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "Accounts" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "Security" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

# Here's all the MacOS frameworks,
    # Accelerate
    # Accessibility
    # Accounts
    # AddressBook
    # AddressBookCore
    # AdSupport
    # AGL
    # AppKit
    # AppleScriptKit
    # AppleScriptObjC
    # ApplicationServices
    # AppTrackingTransparency
    # AudioToolbox
    # AudioToolboxCore
    # AudioUnit
    # AudioVideoBridging
    # AuthenticationServices
    # AutomaticAssessmentConfiguration
    # Automator
    # AVFCapture
    # AVFCore
    # AVFoundation
    # AVKit
    # BackgroundTasks
    # BusinessChat
    # CalendarStore
    # CallKit
    # Carbon
    # CFNetwork
    # ClassKit
    # CloudKit
    # Cocoa
    # Collaboration
    # ColorSync
    # Combine
    # Contacts
    # ContactsPersistence
    # ContactsUI
    # CoreAudio
    # CoreAudioKit
    # CoreAudioTypes
    # CoreBluetooth
    # CoreData
    # CoreDisplay
    # CoreFoundation
    # CoreGraphics
    # CoreHaptics
    # CoreImage
    # CoreLocation
    # CoreMedia
    # CoreMediaIO
    # CoreMIDI
    # CoreMIDIServer
    # CoreML
    # CoreMotion
    # CoreServices
    # CoreSpotlight
    # CoreSymbolication
    # CoreTelephony
    # CoreText
    # CoreVideo
    # CoreWLAN
    # CryptoKit
    # CryptoTokenKit
    # DebugSymbols
    # DeveloperToolsSupport
    # DeviceCheck
    # DirectoryService
    # DiscRecording
    # DiscRecordingUI
    # DiskArbitration
    # DriverKit
    # DVDPlayback
    # EventKit
    # ExceptionHandling
    # ExecutionPolicy
    # ExternalAccessory
    # FileProvider
    # FileProviderUI
    # FinderSync
    # ForceFeedback
    # Foundation
    # FWAUserLib
    # GameCenterFoundation
    # GameCenterUI
    # GameCenterUICore
    # GameController
    # GameKit
    # GameplayKit
    # GLKit
    # GLUT
    # GSS
    # HIDDriverKit
    # Hypervisor
    # ICADevices
    # IdentityLookup
    # ImageCaptureCore
    # ImageIO
    # IMServicePlugIn
    # InputMethodKit
    # InstallerPlugins
    # InstantMessage
    # Intents
    # IOBluetooth
    # IOBluetoothUI
    # IOKit
    # IOSurface
    # IOUSBHost
    # iTunesLibrary
    # JavaNativeFoundation
    # JavaRuntimeSupport
    # JavaScriptCore
    # Kerberos
    # Kernel
    # KernelManagement
    # LatentSemanticMapping
    # LDAP
    # LinkPresentation
    # LocalAuthentication
    # MapKit
    # MediaAccessibility
    # MediaLibrary
    # MediaPlayer
    # MediaToolbox
    # Message
    # Metal
    # MetalKit
    # MetalPerformanceShaders
    # MetalPerformanceShadersGraph
    # MetricKit
    # MLCompute
    # ModelIO
    # MultipeerConnectivity
    # MultitouchSupport
    # NaturalLanguage
    # NearbyInteraction
    # NetFS
    # Network
    # NetworkExtension
    # NetworkingDriverKit
    # NotificationCenter
    # OpenAL
    # OpenCL
    # OpenDirectory
    # OpenGL
    # OSAKit
    # OSLog
    # ParavirtualizedGraphics
    # PassKit
    # PassKitCore
    # PCIDriverKit
    # PCSC
    # PDFKit
    # PencilKit
    # Photos
    # PhotosUI
    # PreferencePanes
    # PushKit
    # Python
    # QTKit
    # Quartz
    # QuartzCore
    # QuickLook
    # QuickLookThumbnailing
    # RealityKit
    # ReplayKit
    # Ruby
    # SafariServices
    # SceneKit
    # ScreenSaver
    # ScreenTime
    # ScriptingBridge
    # Security
    # SecurityFoundation
    # SecurityInterface
    # SensorKit
    # ServiceManagement
    # SignpostMetrics
    # SkyLight
    # Social
    # SoundAnalysis
    # Speech
    # SpriteKit
    # StoreKit
    # SwiftUI
    # SyncServices
    # System
    # SystemConfiguration
    # SystemExtensions
    # Tcl
    # Tk
    # TWAIN
    # UIFoundation
    # UniformTypeIdentifiers
    # URLFormatting
    # USBDriverKit
    # UserNotifications
    # UserNotificationsUI
    # VideoDecodeAcceleration
    # VideoSubscriberAccount
    # VideoToolbox
    # Virtualization
    # Vision
    # vmnet
    # WebKit
    # WidgetKit
 

# 
# both often need
# 
[[packages]]
load = [ "gcc",]

[[packages]]
load = [ "libkrb5",]

# 
# 
# common dependencies
# 
# 

[[packages]]
load = [ "ncurses5",]

[[packages]]
load = [ "openssh",]

# 
# 
# fancy command line tools
# 
# 
[[packages]]
load = [ "fd",]

[[packages]]
load = [ "sd",]

[[packages]]
load = [ "dua",]

[[packages]]
load = [ "tealdeer",]

[[packages]]
load = [ "bottom",]

[[packages]]
load = [ "exa",]

[[packages]]
load = [ "zsh",]

[[packages]]
load = [ "zsh-syntax-highlighting",]

[[packages]]
load = [ "oh-my-zsh",]

[[packages]]
load = [ "zsh-autosuggestions",]

[[packages]]
load = [ "spaceship-prompt",]

[[packages]]
load = [ "nnn",]

[[packages]]
load = [ "jq",]

[[packages]]
load = [ "git-subrepo",]

#
#
# Basic Commandline tools
#
#

[[packages]]
load = [ "man",]

[[packages]]
load = [ "coreutils",]

[[packages]]
load = [ "ripgrep",]

[[packages]]
load = [ "which",]

[[packages]]
load = [ "git",]

[[packages]]
load = [ "colorls",]

[[packages]]
load = [ "tree",]

[[packages]]
load = [ "less",]

[[packages]]
load = [ "nano",]

[[packages]]
load = [ "unzip",]

[[packages]]
load = [ "zip",]

[[packages]]
load = [ "findutils",]

[[packages]]
load = [ "wget",]

[[packages]]
load = [ "curl",]

[[packages]]
load = [ "unixtools", "arp",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "ifconfig",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "netstat",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "ping",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "route",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "col",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "column",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "fdisk",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "fsck",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "getconf",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "getent",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "getopt",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "hexdump",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "hostname",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "killall",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "locale",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "more",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "mount",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "ps",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "quota",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "script",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "sysctl",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "top",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "umount",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "whereis",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "write",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "xxd",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

# 
# core
# 
[[packages]]
load = [ "deno",]
from = "ce6aa13369b667ac2542593170993504932eb836"

[[packages]]
load = [ "nix",]